from flask import Flask, render_template, request, redirect, url_for, flash
import os
import sqlite3

app = Flask(__name__)
app.secret_key = os.environ.get("SECRET_KEY", "devsecret")  # –¥–ª—è flash()

# --- SQLite (–ø—Ä–∞—Ü—é—î, —è–∫—â–æ –∑–∞–¥–∞–Ω–æ DB_PATH —ñ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è users) ---
DB_PATH = os.environ.get("DB_PATH", "database.db")

def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

# ---- –¥–µ—Ñ–æ–ª—Ç–∏ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤ ----
class Guest:
    is_authenticated = False
    name = None
    email = None

@app.context_processor
def inject_defaults():
    return dict(current_user=Guest(), pxp=0)

def safe_render(tpl, fallback_text):
    try:
        return render_template(tpl)
    except Exception:
        # —â–æ–± –±–∞—á–∏—Ç–∏ —Ç–æ—á–Ω—É –ø—Ä–∏—á–∏–Ω—É ‚Äî –¥–∏–≤–∏—Å—å View logs —É Railway
        return fallback_text

# ---- –º–∞—Ä—à—Ä—É—Ç–∏ ----
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/stl")
def stl():
    return render_template("stl.html")

@app.route("/video")
def video():
    return render_template("video.html")

@app.route("/enhance")
def enhance():
    return render_template("enhance.html")

@app.route("/edit-photo")
def edit_photo():
    return render_template("edit_photo.html")

# —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —â–æ –∑–∞—Ä–∞–∑ –ø–∞–¥–∞—é—Ç—å ‚Üí —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –±–µ–∑–ø–µ—á–Ω–æ
@app.route("/top100")
def top100():
    return safe_render("top100.html", "Top100 page (—Ç–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞)")

@app.route("/donate")
def donate():
    return safe_render("donate.html", "Donate page (—Ç–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞)")

@app.route("/login")
def login():
    return safe_render("login.html", "Login page (—Ç–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞)")

# ---- –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–æ–∑–≤–æ–ª–µ–Ω–æ POST —ñ –∑–∞–ø–∏—Å —É –ë–î, —è–∫—â–æ —î ----
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        name = (request.form.get("name") or "").strip() or None
        email = (request.form.get("email") or "").strip().lower()
        password = request.form.get("password") or ""

        if not email or not password:
            flash("–í–∫–∞–∂–∏ email —ñ –ø–∞—Ä–æ–ª—å ‚ùå")
            return redirect(url_for("register"))

        # –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç–∏ –≤ SQLite (—è–∫—â–æ DB_PATH/—Ç–∞–±–ª–∏—Ü—è —î)
        try:
            db = get_db()
            db.execute(
                "INSERT INTO users (email, name, password, pxp, name_changes) VALUES (?, ?, ?, 0, 0)",
                (email, name, password)
            )
            db.commit()
            flash("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ –¢–µ–ø–µ—Ä —É–≤—ñ–π–¥–∏.")
            return redirect(url_for("login"))
        except sqlite3.IntegrityError:
            flash("–¢–∞–∫–∏–π email –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π ‚ùå")
            return redirect(url_for("register"))
        except Exception:
            # —è–∫—â–æ –ë–î —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ ‚Äî –Ω–µ –ø–∞–¥–∞—î–º–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            flash("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –±–µ–∑ –ë–î ‚Äî –Ω–∞–ª–∞—à—Ç—É–π DB_PATH/—Ç–∞–±–ª–∏—Ü—é users. ‚úÖ –§–æ—Ä–º–∞ –ø—Ä–∞—Ü—é—î.")
            return redirect(url_for("login"))

    # GET:
    return safe_render("register.html", "Register page (—Ç–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–≥–ª—É—à–∫–∞)")

@app.route("/profile")
def profile():
    return render_template("profile.html")

@app.route("/logout")
def logout():
    return "Logout OK"

# ---- –î–û–î–ê–ù–û —Ä–∞–Ω—ñ—à–µ: –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ª–æ–≥—ñ–Ω—É ----
@app.route("/login_local", methods=["POST"])
def login_local():
    email = request.form.get("email", "").strip()
    password = request.form.get("password", "")
    # —Ç–∏–º—á–∞—Å–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ (–ø—ñ–∑–Ω—ñ—à–µ –ø—ñ–¥–∫–ª—é—á–∏–º–æ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ª–æ–≥—ñ–Ω —ñ–∑ –ë–î)
    try:
        db = get_db()
        row = db.execute(
            "SELECT id, email, name, password FROM users WHERE email = ?",
            (email,)
        ).fetchone()
        if row and row["password"] == password:
            flash("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ ‚úÖ")
            return redirect(url_for("index"))
    except Exception:
        # —è–∫—â–æ –ë–î —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ ‚Äî fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ –∫—Ä–µ–¥–µ–Ω—à–ª–∏
        if email == "test@test.com" and password == "123":
            flash("–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ ‚úÖ")
            return redirect(url_for("index"))

    flash("–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å ‚ùå")
    return redirect(url_for("login"))

@app.route("/login_google")
def login_google():
    flash("–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ Google –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ üôÇ")
    return redirect(url_for("login"))

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

